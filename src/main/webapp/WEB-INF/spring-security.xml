<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

       <!-- 不要过滤图片等静态资源 -->
       <http pattern="/**/*.jpg" security="none"/>
       <http pattern="/**/*.png" security="none"/>
       <http pattern="/**/*.gif" security="none"/>
       <http pattern="/**/*.css" security="none"/>
       <http pattern="/**/*.js" security="none"/>
       <http pattern="/font/**" security="none"/>
       <http pattern="/css/**" security="none"/>
       <http pattern="/js/**" security="none"/>
       <!-- 登录页面和忘记密码页面不过滤  -->
       <http pattern="/accessDenied" security="none"/>
       <http pattern="/sessionTimeout" security="none"/>

       <http auto-config="true">
              <form-login login-page="http://open.xmu.edu.cn/oauth2/authorize?client_id=CLIENT_ID&amp;response_type=code" login-processing-url="/checkLogin"
                          authentication-failure-handler-ref="myAuthenticationFailureHandler"
                          authentication-success-handler-ref="myAuthenticationSuccessHandler"/>
              <headers><frame-options policy="SAMEORIGIN"/> </headers>
              <access-denied-handler ref="myAccessDeniedHandler"/>

              <session-management session-fixation-protection="migrateSession">
                     <concurrency-control max-sessions="1"
                                          error-if-maximum-exceeded="false" expired-url="/index" session-registry-ref="mySessionRegistry" />
              </session-management>

              <logout invalidate-session="true" logout-url="/logout"  success-handler-ref="myLogoutSuccessHandler" />

              <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
              <csrf disabled="true"/>
              <!--<remember-me user-service-ref="myUserDetailService"/>-->
       </http>

       <!--handler包括登录验证失败，登录验证成功，访问资源权限不够-->
       <b:bean name="myAuthenticationFailureHandler" class="com.citi.portfoliomanager.security.MyAuthenticationFailureHandler">
              <b:property name="defaultFailureUrl" value="/login"/>
       </b:bean>

       <b:bean name="myAuthenticationSuccessHandler" class="com.citi.portfoliomanager.security.MyAuthenticationSuccessHandler">
              <b:property name="defaultTargetUrl" value="/home"/>
       </b:bean>

       <b:bean name="myLogoutSuccessHandler" class="com.citi.portfoliomanager.security.MyLogoutSuccessHandler">
              <b:property name="defaultTargetUrl" value="/login" />
       </b:bean>

       <b:bean name="myAccessDeniedHandler" class="com.citi.portfoliomanager.security.MyAccessDeniedHandler">
              <b:property name="errorPage" value="/accessDenied" />
       </b:bean>
       <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
              我们的所有控制将在这三个类中实现，解释详见具体配置 -->
       <b:bean id="myFilter"
               class="com.citi.portfoliomanager.security.MyFilterSecurityInterceptor">
              <b:property name="authenticationManager" ref="authenticationManager" />
              <b:property name="accessDecisionManager" ref="myAccessDecisionManager"/>
              <b:property name="securityMetadataSource" ref="securityMetadataSource" />
       </b:bean>
       <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
       <authentication-manager alias="authenticationManager">
              <authentication-provider ref="myAuthenticationProvider"/>
       </authentication-manager>

       <b:bean id="myAuthenticationProvider"
               class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
              <!--验证用户-->
              <b:property name="userDetailsService" ref="myUserDetailService" />
              <!--显示用户错误信息-->
              <b:property name="hideUserNotFoundExceptions" value="false" />
              <!--md5加密-->
              <b:property name="passwordEncoder" ref="myPasswordEncoder" />
              <!--盐值-->
              <b:property name="saltSource" ref="mySaltSource"/>
       </b:bean>

       <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
       <b:bean id="myUserDetailService" class="com.citi.portfoliomanager.security.MyUserDetailService"/>
       <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
       <b:bean id="myAccessDecisionManager"
               class="com.citi.portfoliomanager.security.MyAccessDecisionManager" />

       <!--md5加密策略-->
       <b:bean id="myPasswordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>

       <!--配置盐值-->
       <b:bean id="mySaltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
              <b:property name="userPropertyToUse" value="getUsername" />
       </b:bean>

       <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
       <b:bean id="securityMetadataSource"
               class="com.citi.portfoliomanager.security.MyInvocationSecurityMetadataSource" />

       <!--session策略-->
       <b:bean id="mySessionRegistry" class="com.citi.portfoliomanager.security.MySessionRegistry"/>

       <!--自定义Security上下文-->
       <b:bean id = "mySecurityContext" class="com.citi.portfoliomanager.security.MySecurityContext">
              <b:property name="mySessionRegistry" ref="mySessionRegistry"/>
              <b:property name="myAuthenticationManager" ref="authenticationManager"/>
       </b:bean>
</b:beans>
